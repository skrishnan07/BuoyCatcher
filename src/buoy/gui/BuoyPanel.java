/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package buoy.gui;

import buoy.model.Buoy;
import buoy.model.BuoyCatcher;
import buoy.model.WeatherCondition;
import java.awt.Desktop;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseListener;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import java.util.concurrent.ExecutionException;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingWorker;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;

/**
 *
 * @author Shankar Krishnan
 */
public class BuoyPanel extends javax.swing.JPanel
{

    protected PropertyChangeSupport propertyChangeSupport;
    protected BuoyCatcherDialog buoyCatcherDialog = null;

    /**
     * Creates new form FavoritesPanel Set row selection settings to allow
     * single row selections
     */
    public BuoyPanel()
    {

        initComponents();
        fixTblSelectionModel(tableBuoys);
        fixTblSelectionModel(tableConditions);

        if (tableBuoys != null)
        {
            tableBuoys.putClientProperty(BuoyCatcherDialog.CLIENT_PROPERTY_BUOY_LIST, buoyList);
        }

    }

    public void setBuoyCatcherDialog(BuoyCatcherDialog bcDlg)
    {
        buoyCatcherDialog = bcDlg;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jScrollPane1 = new javax.swing.JScrollPane();
        tableBuoys = new javax.swing.JTable();
        lblTop = new javax.swing.JLabel();
        lblLegend = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableConditions = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        btnFavorite = new javax.swing.JButton();
        lblReportTime = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        lblURL = new javax.swing.JLabel();

        tableBuoys.setColumnSelectionAllowed(true);
        tableBuoys.getTableHeader().setReorderingAllowed(false);

        org.jdesktop.beansbinding.ELProperty eLProperty = org.jdesktop.beansbinding.ELProperty.create("${buoyList}");
        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, tableBuoys);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${stationID}"));
        columnBinding.setColumnName("Station ID");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${name}"));
        columnBinding.setColumnName("Full Name");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${latlong}"));
        columnBinding.setColumnName("Location");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${relativeLocation}"));
        columnBinding.setColumnName("Relative Location");
        columnBinding.setColumnClass(String.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${selectedBuoy}"), tableBuoys, org.jdesktop.beansbinding.BeanProperty.create("selectedElement"));
        bindingGroup.addBinding(binding);

        jScrollPane1.setViewportView(tableBuoys);
        tableBuoys.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (tableBuoys.getColumnModel().getColumnCount() > 0)
        {
            tableBuoys.getColumnModel().getColumn(0).setMinWidth(150);
            tableBuoys.getColumnModel().getColumn(0).setPreferredWidth(150);
            tableBuoys.getColumnModel().getColumn(0).setMaxWidth(150);
            tableBuoys.getColumnModel().getColumn(1).setPreferredWidth(250);
            tableBuoys.getColumnModel().getColumn(2).setMinWidth(150);
            tableBuoys.getColumnModel().getColumn(2).setPreferredWidth(150);
            tableBuoys.getColumnModel().getColumn(2).setMaxWidth(150);
            tableBuoys.getColumnModel().getColumn(3).setPreferredWidth(250);
        }

        lblTop.setText("Favorite Buoys:");

        tableConditions.getTableHeader().setReorderingAllowed(false);

        eLProperty = org.jdesktop.beansbinding.ELProperty.create("${buoyData}");
        jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, tableConditions);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${name}"));
        columnBinding.setColumnName("Weather Variable");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${value}"));
        columnBinding.setColumnName("Reading");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jScrollPane3.setViewportView(tableConditions);
        if (tableConditions.getColumnModel().getColumnCount() > 0)
        {
            tableConditions.getColumnModel().getColumn(0).setMinWidth(250);
            tableConditions.getColumnModel().getColumn(0).setPreferredWidth(250);
            tableConditions.getColumnModel().getColumn(0).setMaxWidth(250);
        }

        jLabel2.setText("Report:");

        btnFavorite.setText("Remove As Favorite");
        btnFavorite.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnFavoriteActionPerformed(evt);
            }
        });

        lblReportTime.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${selectedBuoy.reportTime}"), lblReportTime, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jLabel1.setText("URL:");

        lblURL.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(3, 3, 3)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel1)
                        .addComponent(jLabel2))
                    .addGap(43, 43, 43)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lblReportTime, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblURL, javax.swing.GroupLayout.PREFERRED_SIZE, 569, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnFavorite)
                    .addGap(3, 3, 3)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 75, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(31, 31, 31)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                        .addComponent(btnFavorite)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                .addComponent(jLabel1)
                                .addComponent(lblURL))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                .addComponent(jLabel2)
                                .addComponent(lblReportTime))))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblTop)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 419, Short.MAX_VALUE)
                        .addComponent(lblLegend, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTop)
                    .addComponent(lblLegend))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 483, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8))
        );

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    private void btnFavoriteActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnFavoriteActionPerformed
    {//GEN-HEADEREND:event_btnFavoriteActionPerformed
        boolean bFav = buoyMode == MODE_ALL;
        buoyCatcher.setFavoriteStatus(selectedBuoy, bFav);
        buoyCatcherDialog.markFavorite(bFav);
    }//GEN-LAST:event_btnFavoriteActionPerformed

    public static int MODE_ALL = 0;
    public static int MODE_FAVORITES = 1;

    private int buoyMode = MODE_ALL;

    protected void setMode(int mode)
    {
        buoyMode = mode;
        if (buoyMode == MODE_ALL)
        {
            btnFavorite.setText("Mark As Favorite");
            lblTop.setText("All Buoys");

            setTableRowCellRenderer(tableBuoys, new FavoriteBuoyCellRenderer());
            lblLegend.setText("Buoys highlighted in bold font are already included in the Favorites list");

        } else
        {
            btnFavorite.setText("Remove From Favorites");
            lblTop.setText("My Favorite Buoys");
            lblLegend.setText("Red highlight indicates a favorite buoy with stale data");

            setTableRowCellRenderer(tableBuoys, new MissingBuoyCellRenderer());
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFavorite;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblLegend;
    private javax.swing.JLabel lblReportTime;
    private javax.swing.JLabel lblTop;
    private javax.swing.JLabel lblURL;
    private javax.swing.JTable tableBuoys;
    private javax.swing.JTable tableConditions;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    private List<Buoy> buoyList = new ArrayList<>();
    public static final String PROP_BUOYLIST = "buoyList";

    private Buoy selectedBuoy;
    public static final String PROP_SELECTEDBUOY = "selectedBuoy";

    private List<WeatherCondition> buoyData = new ArrayList<>();
    public static final String PROP_BUOYDATA = "buoyData";

    /**
     * Get the value of buoyData
     *
     * @return the value of buoyData
     */
    public List<WeatherCondition> getBuoyData()
    {
        return buoyData;
    }

    /**
     * Set the value of buoyData
     *
     * @param buoyData new value of buoyData
     */
    public void setBuoyData(List<WeatherCondition> buoyData)
    {
        List<WeatherCondition> oldBuoyData = this.buoyData;
        this.buoyData = buoyData;
        propertyChangeSupport.firePropertyChange(PROP_BUOYDATA, oldBuoyData, buoyData);
    }

    public static void fixTblSelectionModel(JTable table)
    {
        table.setCellSelectionEnabled(false);
        table.setColumnSelectionAllowed(false);
        table.setRowSelectionAllowed(true);
    }

    /**
     * Get the value of selectedBuoy
     *
     * @return the value of selectedBuoy
     */
    public Buoy getSelectedBuoy()
    {
        return selectedBuoy;
    }

    private LinkMouseListener linkmousListner = null;

    /**
     * Set the value of selectedBuoy
     *
     * @param selectedBuoy new value of selectedBuoy
     */
    public void setSelectedBuoy(Buoy selectedBuoy)
    {
        Buoy oldSelectedBuoy = this.selectedBuoy;
        this.selectedBuoy = selectedBuoy;

        propertyChangeSupport.firePropertyChange(PROP_SELECTEDBUOY, oldSelectedBuoy, selectedBuoy);

        btnFavorite.setEnabled(selectedBuoy != null);

        if (selectedBuoy != null)
        {
            populateBuoyData(selectedBuoy.getConditions());

            if (buoyMode == MODE_ALL && selectedBuoy.isFavorite())
            {
                btnFavorite.setEnabled(false);
            }

            lblURL.setText(selectedBuoy.getLinkURL());

            LinkMouseListener ml = new LinkMouseListener();
            makeLinkable(lblURL, ml, linkmousListner);
            linkmousListner = ml;

        } else
        {
            populateBuoyData(new ArrayList<>());
        }

    }

    protected BuoyCatcher buoyCatcher = null;

    /**
     * Get the value of buoyList
     *
     * @return the value of buoyList
     */
    public List<Buoy> getBuoyList()
    {
        return buoyList;
    }

    /**
     * Set the value of buoyList
     *
     * @param buoyList new value of buoyList
     */
    public void setBuoyList(List<Buoy> buoyList)
    {
        List<Buoy> oldBuoyList = this.buoyList;
        this.buoyList = buoyList;

        if (tableBuoys != null)
        {
            tableBuoys.putClientProperty(BuoyCatcherDialog.CLIENT_PROPERTY_BUOY_LIST, this.buoyList);
        }

        propertyChangeSupport.firePropertyChange(PROP_BUOYLIST, oldBuoyList, buoyList);

    }

    /**
     * Add PropertyChangeListener.
     *
     * @param listener
     */
    public void addPropertyChangeListener(PropertyChangeListener listener)
    {
        if (propertyChangeSupport == null)
        {
            propertyChangeSupport = new PropertyChangeSupport(this);
        }
        propertyChangeSupport.addPropertyChangeListener(listener);
    }

    /**
     * Remove PropertyChangeListener.
     *
     * @param listener
     */
    public void removePropertyChangeListener(PropertyChangeListener listener)
    {
        propertyChangeSupport.removePropertyChangeListener(listener);
    }

    /**
     * Populates the Buoy Table with the passed in list of Buoy objects
     *
     * @param listB
     */
    void populateBuoyList(List<Buoy> listB)
    {
        ArrayList<Buoy> arr = new ArrayList<>();

        if (listB != null && listB.size() > 0)
        {
            arr.addAll(listB);

        }
        setBuoyList(arr);
        if (tableBuoys != null && tableBuoys.getRowCount() > 0)
        {
            tableBuoys.setRowSelectionInterval(0, 0);

        }
    }

    void populateBuoyData(List<WeatherCondition> listWC)
    {
        ArrayList<WeatherCondition> arr = new ArrayList<>();

        if (listWC != null && listWC.size() > 0)
        {
            arr.addAll(listWC);

        }
        setBuoyData(arr);
    }

    /**
     * Set the table Cell Renderer
     *
     * @param table
     * @param tableRowRenderer
     */
    protected void setTableRowCellRenderer(JTable table, TableCellRenderer tableRowRenderer)
    {
        TableColumn column = null;
        Enumeration tcols = table.getColumnModel().getColumns();
        while (tcols.hasMoreElements())
        {
            column = (TableColumn) tcols.nextElement();
            column.setCellRenderer(tableRowRenderer);
        }
    }

    // Support for clickable HTML Links
    private static final String A_HREF = "<a href=\"";
    private static final String HREF_CLOSED = "\">";
    private static final String HREF_END = "</a>";
    private static final String HTML = "<html>";
    private static final String HTML_END = "</html>";

    private static void makeLinkable(JLabel c, MouseListener ml, MouseListener old)
    {
        assert ml != null;
        if (old != null)
        {
            c.removeMouseListener(old);
        }
        c.setText(htmlIfy(linkIfy(c.getText())));
        c.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        c.addMouseListener(ml);
    }

    private static boolean isBrowsingSupported()
    {
        if (!Desktop.isDesktopSupported())
        {
            return false;
        }
        boolean result = false;
        Desktop desktop = java.awt.Desktop.getDesktop();
        if (desktop.isSupported(Desktop.Action.BROWSE))
        {
            result = true;
        }
        return result;

    }

    private static class LinkMouseListener extends MouseAdapter
    {

        @Override
        public void mouseClicked(java.awt.event.MouseEvent evt)
        {
            JLabel l = (JLabel) evt.getSource();
            try
            {
                URI uri = new java.net.URI(getPlainLink(l.getText()));
                (new LinkRunner(uri)).execute();
            } catch (URISyntaxException use)
            {
                throw new AssertionError(use + ": " + l.getText()); //NOI18N
            }
        }
    }

    private static class LinkRunner extends SwingWorker<Void, Void>
    {

        private final URI uri;

        private LinkRunner(URI u)
        {
            if (u == null)
            {
                throw new NullPointerException();
            }
            uri = u;
        }

        @Override
        protected Void doInBackground() throws Exception
        {
            Desktop desktop = java.awt.Desktop.getDesktop();
            desktop.browse(uri);
            return null;
        }

        @Override
        protected void done()
        {
            try
            {
                get();
            } catch (ExecutionException ee)
            {
                handleException(uri, ee);
            } catch (InterruptedException ie)
            {
                handleException(uri, ie);
            }
        }

        private static void handleException(URI u, Exception e)
        {
            JOptionPane.showMessageDialog(null, "Sorry, a problem occurred while trying to open this link in your system's standard browser.", "A problem occured", JOptionPane.ERROR_MESSAGE);
        }
    }

    private static String getPlainLink(String s)
    {
        return s.substring(s.indexOf(A_HREF) + A_HREF.length(), s.indexOf(HREF_CLOSED));
    }

//WARNING
//This method requires that s is a plain string that requires
//no further escaping
    private static String linkIfy(String s)
    {
        if (s != null)
        {
            return A_HREF.concat(s).concat(HREF_CLOSED).concat(s).concat(HREF_END);
        } else
        {
            return s;
        }
    }

//WARNING
//This method requires that s is a plain string that requires
//no further escaping
    private static String htmlIfy(String s)
    {
        if (s != null)
        {
            return HTML.concat(s).concat(HTML_END);
        } else
        {
            return s;
        }
    }

}
