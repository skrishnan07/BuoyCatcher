/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package buoy.gui;

import buoy.Buoy;
import buoy.BuoyCatcher;
import buoy.WeatherCondition;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JTable;

/**
 *
 * @author Shankar Krishnan
 */
public class BuoyPanel extends javax.swing.JPanel
{
    
    protected  PropertyChangeSupport propertyChangeSupport;
    protected  BuoyCatcherDialog buoyCatcherDialog = null;

   
    /**
     * Creates new form FavoritesPanel
     * Set row selection settings to allow single row selections
     */
    public BuoyPanel()
    {
       
        initComponents();
        fixTblSelectionModel(tableBuoys);
        fixTblSelectionModel(tableConditions);
        
    }
    
    public void setBuoyCatcherDialog(BuoyCatcherDialog bcDlg)
    {
        buoyCatcherDialog = bcDlg;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jScrollPane1 = new javax.swing.JScrollPane();
        tableBuoys = new javax.swing.JTable();
        lblTop = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableConditions = new javax.swing.JTable();
        btnFavorite = new javax.swing.JButton();
        lblReportTime = new javax.swing.JLabel();

        tableBuoys.setColumnSelectionAllowed(true);
        tableBuoys.getTableHeader().setReorderingAllowed(false);

        org.jdesktop.beansbinding.ELProperty eLProperty = org.jdesktop.beansbinding.ELProperty.create("${buoyList}");
        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, tableBuoys);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${stationID}"));
        columnBinding.setColumnName("Station ID");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${name}"));
        columnBinding.setColumnName("Full Name");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${latlong}"));
        columnBinding.setColumnName("Location");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${relativeLocation}"));
        columnBinding.setColumnName("Relative Location");
        columnBinding.setColumnClass(String.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${selectedBuoy}"), tableBuoys, org.jdesktop.beansbinding.BeanProperty.create("selectedElement"));
        bindingGroup.addBinding(binding);

        jScrollPane1.setViewportView(tableBuoys);
        tableBuoys.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (tableBuoys.getColumnModel().getColumnCount() > 0)
        {
            tableBuoys.getColumnModel().getColumn(0).setResizable(false);
            tableBuoys.getColumnModel().getColumn(0).setPreferredWidth(150);
            tableBuoys.getColumnModel().getColumn(1).setResizable(false);
            tableBuoys.getColumnModel().getColumn(1).setPreferredWidth(250);
            tableBuoys.getColumnModel().getColumn(2).setResizable(false);
            tableBuoys.getColumnModel().getColumn(2).setPreferredWidth(150);
            tableBuoys.getColumnModel().getColumn(3).setResizable(false);
            tableBuoys.getColumnModel().getColumn(3).setPreferredWidth(250);
        }

        lblTop.setText("Favorite Buoys:");

        jLabel2.setText("Report:");

        tableConditions.getTableHeader().setReorderingAllowed(false);

        eLProperty = org.jdesktop.beansbinding.ELProperty.create("${buoyData}");
        jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, tableConditions);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${name}"));
        columnBinding.setColumnName("Weather Variable");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${value}"));
        columnBinding.setColumnName("Reading");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jScrollPane2.setViewportView(tableConditions);
        if (tableConditions.getColumnModel().getColumnCount() > 0)
        {
            tableConditions.getColumnModel().getColumn(0).setMinWidth(250);
            tableConditions.getColumnModel().getColumn(0).setPreferredWidth(250);
            tableConditions.getColumnModel().getColumn(0).setMaxWidth(250);
        }

        btnFavorite.setText("Remove As Favorite");
        btnFavorite.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnFavoriteActionPerformed(evt);
            }
        });

        lblReportTime.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${selectedBuoy.reportTime}"), lblReportTime, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(91, 91, 91)
                                .addComponent(lblReportTime, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnFavorite))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 965, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblTop)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(lblTop)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 579, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(lblReportTime)
                    .addComponent(jLabel2)
                    .addComponent(btnFavorite))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    private void btnFavoriteActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnFavoriteActionPerformed
    {//GEN-HEADEREND:event_btnFavoriteActionPerformed
        boolean bFav = buoyMode==MODE_ALL;
        buoyCatcher.setFavoriteStatus(selectedBuoy, bFav);
        buoyCatcherDialog.markFavorite(bFav);
    }//GEN-LAST:event_btnFavoriteActionPerformed

    public static int MODE_ALL = 0;
    public static int MODE_FAVORITES = 1;
    
    private int buoyMode = MODE_ALL;
    protected void setMode(int mode)
    {
        buoyMode = mode;
        if ( buoyMode == MODE_ALL)
        {
            btnFavorite.setText("Mark As Favorite");
            lblTop.setText("All Buoys");
        }
        else
        {
            btnFavorite.setText("Remove From Favorites");
            lblTop.setText("My Favorite Buoys");
        }
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFavorite;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblReportTime;
    private javax.swing.JLabel lblTop;
    private javax.swing.JTable tableBuoys;
    private javax.swing.JTable tableConditions;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables


    private List<Buoy> buoyList = new ArrayList<>();
    public static final String PROP_BUOYLIST = "buoyList";
    
    private Buoy selectedBuoy;
    public static final String PROP_SELECTEDBUOY = "selectedBuoy";
    
    private List<WeatherCondition> buoyData = new ArrayList<>();
    public static final String PROP_BUOYDATA = "buoyData";

    /**
     * Get the value of buoyData
     *
     * @return the value of buoyData
     */
    public List<WeatherCondition> getBuoyData()
    {
        return buoyData;
    }

    /**
     * Set the value of buoyData
     *
     * @param buoyData new value of buoyData
     */
    public void setBuoyData(List<WeatherCondition> buoyData)
    {
        List<WeatherCondition> oldBuoyData = this.buoyData;
        this.buoyData = buoyData;
        propertyChangeSupport.firePropertyChange(PROP_BUOYDATA, oldBuoyData, buoyData);
    }

    
      public static void fixTblSelectionModel(JTable table)
    {
        table.setCellSelectionEnabled(false);
        table.setColumnSelectionAllowed(false);
        table.setRowSelectionAllowed(true);
    }
    
    
    /**
     * Get the value of selectedBuoy
     *
     * @return the value of selectedBuoy
     */
    public Buoy getSelectedBuoy()
    {
        return selectedBuoy;
    }

    /**
     * Set the value of selectedBuoy
     *
     * @param selectedBuoy new value of selectedBuoy
     */
    public void setSelectedBuoy(Buoy selectedBuoy)
    {
        Buoy oldSelectedBuoy = this.selectedBuoy;
        this.selectedBuoy = selectedBuoy;
        propertyChangeSupport.firePropertyChange(PROP_SELECTEDBUOY, oldSelectedBuoy, selectedBuoy);
        
        btnFavorite.setEnabled(selectedBuoy != null);
        
        if ( selectedBuoy != null )
        {
            populateBuoyData(selectedBuoy.getConditions());
           
        }
        
    }

    
    protected BuoyCatcher buoyCatcher = null;

    /**
     * Get the value of buoyList
     *
     * @return the value of buoyList
     */
    public List<Buoy> getBuoyList()
    {
        return buoyList;
    }

    /**
     * Set the value of buoyList
     *
     * @param buoyList new value of buoyList
     */
    public void setBuoyList(List<Buoy> buoyList)
    {
        List<Buoy> oldBuoyList = this.buoyList;
        this.buoyList = buoyList;
        propertyChangeSupport.firePropertyChange(PROP_BUOYLIST, oldBuoyList, buoyList);
    }

    
    /**
     * Add PropertyChangeListener.
     *
     * @param listener
     */
    public void addPropertyChangeListener(PropertyChangeListener listener)
    {
        if ( propertyChangeSupport == null)
        {
            propertyChangeSupport = new PropertyChangeSupport(this);
        }
        propertyChangeSupport.addPropertyChangeListener(listener);
    }

    /**
     * Remove PropertyChangeListener.
     *
     * @param listener
     */
    public void removePropertyChangeListener(PropertyChangeListener listener)
    {
        propertyChangeSupport.removePropertyChangeListener(listener);
    }

  
   /**
    * Populates the Buoy Table with the passed in list of Buoy objects
    * @param listB 
    */
    
   void populateBuoyList(List <Buoy> listB)
    {
        ArrayList <Buoy> arr = new ArrayList<>();
      
        if ( listB != null && listB.size() > 0)
        {
            arr.addAll(listB);
            
        }
        setBuoyList(arr);
        if ( tableBuoys != null && tableBuoys.getRowCount() > 0 )
        {
            tableBuoys.setRowSelectionInterval(0, 0);
        }
    }

    void populateBuoyData(List <WeatherCondition> listWC)
    {
        ArrayList <WeatherCondition> arr = new ArrayList<>();
      
        if ( listWC != null && listWC.size() > 0)
        {
            arr.addAll(listWC);
            
        }
        setBuoyData(arr);
    }





}
